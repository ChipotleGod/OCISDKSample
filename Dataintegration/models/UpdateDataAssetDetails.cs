/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.DataintegrationService.Models
{
    /// <summary>
    /// Properties used in data asset update operations.
    /// </summary>
    [JsonConverter(typeof(UpdateDataAssetDetailsModelConverter))]
    public class UpdateDataAssetDetails 
    {
                ///
        /// <value>
        /// The type of the data asset.
        /// </value>
        ///
        public enum ModelTypeEnum {
            [EnumMember(Value = "ORACLE_DATA_ASSET")]
            OracleDataAsset,
            [EnumMember(Value = "ORACLE_OBJECT_STORAGE_DATA_ASSET")]
            OracleObjectStorageDataAsset,
            [EnumMember(Value = "ORACLE_ATP_DATA_ASSET")]
            OracleAtpDataAsset,
            [EnumMember(Value = "ORACLE_ADWC_DATA_ASSET")]
            OracleAdwcDataAsset
        };

        /// <value>
        /// The type of the data asset.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ModelType is required.")]
        [JsonProperty(PropertyName = "modelType")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<ModelTypeEnum> ModelType { get; set; }

        /// <value>
        /// Generated key that can be used in API calls to identify data asset.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Key is required.")]
        [JsonProperty(PropertyName = "key")]
        public string Key { get; set; }

        /// <value>
        /// The model version of an object.
        /// </value>
        [JsonProperty(PropertyName = "modelVersion")]
        public string ModelVersion { get; set; }

        /// <value>
        /// Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value can be edited by the user and it is restricted to 1000 characters
        /// </value>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <value>
        /// Detailed description for the object.
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <value>
        /// The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        /// </value>
        [JsonProperty(PropertyName = "objectStatus")]
        public System.Nullable<int> ObjectStatus { get; set; }

        /// <value>
        /// The version of the object that is used to track changes in the object instance.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ObjectVersion is required.")]
        [JsonProperty(PropertyName = "objectVersion")]
        public System.Nullable<int> ObjectVersion { get; set; }

        /// <value>
        /// Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be edited by the user.
        /// </value>
        [JsonProperty(PropertyName = "identifier")]
        public string Identifier { get; set; }

        /// <value>
        /// The external key for the object
        /// </value>
        [JsonProperty(PropertyName = "externalKey")]
        public string ExternalKey { get; set; }

        /// <value>
        /// assetProperties
        /// </value>
        [JsonProperty(PropertyName = "assetProperties")]
        public System.Collections.Generic.Dictionary<string, string> AssetProperties { get; set; }

        [JsonProperty(PropertyName = "registryMetadata")]
        public RegistryMetadata RegistryMetadata { get; set; }
    }

    public class UpdateDataAssetDetailsModelConverter : JsonConverter
    {
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(UpdateDataAssetDetails);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(UpdateDataAssetDetails);
            var discriminator = jsonObject["modelType"].Value<string>();
            switch (discriminator)
            {
                case "ORACLE_ATP_DATA_ASSET":
                    obj = new UpdateDataAssetFromAtp();
                    break;
                case "ORACLE_ADWC_DATA_ASSET":
                    obj = new UpdateDataAssetFromAdwc();
                    break;
                case "ORACLE_OBJECT_STORAGE_DATA_ASSET":
                    obj = new UpdateDataAssetFromObjectStorage();
                    break;
                case "ORACLE_DATA_ASSET":
                    obj = new UpdateDataAssetFromOracle();
                    break;
            }
            serializer.Populate(jsonObject.CreateReader(), obj);
            return obj;
        }
    }
}
